// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/nmatsui/Documents/code/go/src/github.com/coreos/etcd/client/keys.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	client "github.com/coreos/etcd/client"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockKeysAPI is a mock of KeysAPI interface
type MockKeysAPI struct {
	ctrl     *gomock.Controller
	recorder *MockKeysAPIMockRecorder
}

// MockKeysAPIMockRecorder is the mock recorder for MockKeysAPI
type MockKeysAPIMockRecorder struct {
	mock *MockKeysAPI
}

// NewMockKeysAPI creates a new mock instance
func NewMockKeysAPI(ctrl *gomock.Controller) *MockKeysAPI {
	mock := &MockKeysAPI{ctrl: ctrl}
	mock.recorder = &MockKeysAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeysAPI) EXPECT() *MockKeysAPIMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockKeysAPI) Get(ctx context.Context, key string, opts *client.GetOptions) (*client.Response, error) {
	ret := m.ctrl.Call(m, "Get", ctx, key, opts)
	ret0, _ := ret[0].(*client.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockKeysAPIMockRecorder) Get(ctx, key, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeysAPI)(nil).Get), ctx, key, opts)
}

// Set mocks base method
func (m *MockKeysAPI) Set(ctx context.Context, key, value string, opts *client.SetOptions) (*client.Response, error) {
	ret := m.ctrl.Call(m, "Set", ctx, key, value, opts)
	ret0, _ := ret[0].(*client.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set
func (mr *MockKeysAPIMockRecorder) Set(ctx, key, value, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockKeysAPI)(nil).Set), ctx, key, value, opts)
}

// Delete mocks base method
func (m *MockKeysAPI) Delete(ctx context.Context, key string, opts *client.DeleteOptions) (*client.Response, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, key, opts)
	ret0, _ := ret[0].(*client.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockKeysAPIMockRecorder) Delete(ctx, key, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKeysAPI)(nil).Delete), ctx, key, opts)
}

// Create mocks base method
func (m *MockKeysAPI) Create(ctx context.Context, key, value string) (*client.Response, error) {
	ret := m.ctrl.Call(m, "Create", ctx, key, value)
	ret0, _ := ret[0].(*client.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockKeysAPIMockRecorder) Create(ctx, key, value interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKeysAPI)(nil).Create), ctx, key, value)
}

// CreateInOrder mocks base method
func (m *MockKeysAPI) CreateInOrder(ctx context.Context, dir, value string, opts *client.CreateInOrderOptions) (*client.Response, error) {
	ret := m.ctrl.Call(m, "CreateInOrder", ctx, dir, value, opts)
	ret0, _ := ret[0].(*client.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInOrder indicates an expected call of CreateInOrder
func (mr *MockKeysAPIMockRecorder) CreateInOrder(ctx, dir, value, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInOrder", reflect.TypeOf((*MockKeysAPI)(nil).CreateInOrder), ctx, dir, value, opts)
}

// Update mocks base method
func (m *MockKeysAPI) Update(ctx context.Context, key, value string) (*client.Response, error) {
	ret := m.ctrl.Call(m, "Update", ctx, key, value)
	ret0, _ := ret[0].(*client.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockKeysAPIMockRecorder) Update(ctx, key, value interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockKeysAPI)(nil).Update), ctx, key, value)
}

// Watcher mocks base method
func (m *MockKeysAPI) Watcher(key string, opts *client.WatcherOptions) client.Watcher {
	ret := m.ctrl.Call(m, "Watcher", key, opts)
	ret0, _ := ret[0].(client.Watcher)
	return ret0
}

// Watcher indicates an expected call of Watcher
func (mr *MockKeysAPIMockRecorder) Watcher(key, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watcher", reflect.TypeOf((*MockKeysAPI)(nil).Watcher), key, opts)
}

// MockWatcher is a mock of Watcher interface
type MockWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherMockRecorder
}

// MockWatcherMockRecorder is the mock recorder for MockWatcher
type MockWatcherMockRecorder struct {
	mock *MockWatcher
}

// NewMockWatcher creates a new mock instance
func NewMockWatcher(ctrl *gomock.Controller) *MockWatcher {
	mock := &MockWatcher{ctrl: ctrl}
	mock.recorder = &MockWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWatcher) EXPECT() *MockWatcherMockRecorder {
	return m.recorder
}

// Next mocks base method
func (m *MockWatcher) Next(arg0 context.Context) (*client.Response, error) {
	ret := m.ctrl.Call(m, "Next", arg0)
	ret0, _ := ret[0].(*client.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next
func (mr *MockWatcherMockRecorder) Next(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockWatcher)(nil).Next), arg0)
}
